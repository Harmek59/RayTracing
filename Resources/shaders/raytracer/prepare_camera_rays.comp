#version 430

layout(local_size_x = 1, local_size_y = 1) in;

layout(rgba32f, binding = 0) uniform image2D img_position;
layout(rgba16f, binding = 1) uniform image2D img_direction;

uniform int imageWidth = 1280;
uniform int imageHeight = 720;

uniform float fov = 45.;
uniform mat4 viewMatrix;
uniform vec3 cameraPosition;


void main() {

    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    float fov_scale = tan(radians(fov)/2.);
    float imageAspectRatio = float(imageWidth)/ float(imageHeight);

    float pixelCamera_x = (2. * (pixel_coords.x + 0.5) / float(imageWidth) - 1.) * imageAspectRatio * fov_scale; 
    float pixelCamera_y = (1. - 2. * (pixel_coords.y + 0.5) / float(imageHeight)) * fov_scale; 
 
    vec4 position = vec4(cameraPosition, 1.0);
    vec4 direction = viewMatrix * vec4(vec3(pixelCamera_x, pixelCamera_y, -1.), 1.0);
    direction = vec4(direction.xyz - cameraPosition, 1.0);   //subtrack cameraPosition because we have position saved in positon texture and adding position of camera to direction would mess up direcion vectors



    ivec2 pixel_coords_y_inverse = ivec2(ivec2(gl_GlobalInvocationID.x, imageHeight-1 - gl_GlobalInvocationID.y));
                                                                        //inverse y becouse 0,0 coord is on the top
    imageStore(img_position, pixel_coords_y_inverse, position);
    imageStore(img_direction, pixel_coords_y_inverse, direction);
}